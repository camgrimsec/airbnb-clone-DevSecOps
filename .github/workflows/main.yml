name: DevSecOps Pipeline

"on":
  push:
    branches: [ main ]

jobs:

  pre-build:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Check for Malicious Files
        uses: github/codeql-action/analyze@v2
        continue-on-error: true
        with:
          queries: security-extended

  code-analysis:
    needs: pre-build
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3

      - name: SonarQube
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    needs: code-analysis
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3

      - name: Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  build-test:
    needs: security-scan
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3

      - name: Build API
        run: |
          cd api
          npm install
          npm run build

      - name: Test API
        run: |
          cd api
          npm test

  container-scan:
    needs: build-test
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: airbnb-clone
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:api -f api/Dockerfile .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:client -f client/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:api
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:client

      - name: Run AWS Inspector
        uses: aws-actions/run-inspector@v1
        with:
          scan-type: 'ECR'
          ecr-repositories: |
            ${{ env.ECR_REPOSITORY }}

      - name: Enable Security Hub
        uses: aws-actions/security-hub-enable@v1
        with:
          aws-region: us-east-1

      - name: Run AWS Security Hub Scan
        uses: aws-actions/security-hub-scan@v1
        with:
          aws-region: us-east-1
          findings-threshold: 10

  aws-deploy:
    needs: container-scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    continue-on-error: true
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to ECS
        uses: aws-actions/ecs-deploy@v1
        with:
          service: airbnb-service
          cluster: airbnb-cluster
          task-definition: ecs-task-definition.json
          container-name: api
          container-image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:api

      - name: Deploy Client to S3
        uses: aws-actions/s3-upload@v1
        with:
          bucket: airbnb-website
          source: client/build
          region: us-east-1
          acl: public-read

      - name: Invalidate CloudFront Cache
        uses: aws-actions/cloudfront-invalidate@v1
        with:
          distribution-id: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          paths: '/*'

  infrastructure:
    needs: container-scan
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve

  deploy:
    needs: infrastructure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Deploy to Kubernetes
        uses: Azure/k8s-deploy@v1
        with:
          k8s-context: ${{ secrets.K8S_CONTEXT }}
          namespace: airbnb
          manifests: |
            k8s/manifests/api-deployment.yaml
            k8s/manifests/client-deployment.yaml

  post-build:
    needs: container-scan
    runs-on: ubuntu-latest
    if: ${{ always() }}
    continue-on-error: true
    steps:
      - name: Collect Metrics
        run: |
          echo "::set-output name=build_time::${{ github.event.processing_time }}"
          echo "::set-output name=artifact_size::$(du -sh api/ client/ | cut -f1 | paste -sd+ - | bc)"

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Images
        run: |
          docker push airbnb-api:latest
          docker push airbnb-client:latest
